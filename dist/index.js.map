{
  "version": 3,
  "sources": ["../index.ts", "../shared.ts"],
  "sourcesContent": ["import { awaitReply, sendMessage } from \"./shared\";\r\n\r\nexport default class RemotePN {\r\n  telegramToken: string;\r\n  telegramUser: string;\r\n\r\n  constructor({\r\n    telegramToken,\r\n    telegramUser,\r\n  }: {\r\n    telegramToken: string;\r\n    telegramUser: string;\r\n  }) {}\r\n  async prompt(message: string) {\r\n    const { messageId } = await sendMessage(\r\n      this.telegramToken,\r\n      this.telegramUser,\r\n      message\r\n    );\r\n    const response = await awaitReply(\r\n      this.telegramToken,\r\n      this.telegramUser,\r\n      messageId\r\n    );\r\n    return response;\r\n  }\r\n}\r\n", "import fetch from \"node-fetch\";\r\n\r\nconst postRequest = {\r\n  method: \"POST\",\r\n  headers: {\r\n    Accept: \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\nexport const sendMessage = async (\r\n  token: string,\r\n  username: string,\r\n  message: string\r\n) => {\r\n  const response = await fetch(\r\n    \"https://api.telegram.org/bot\" + token + \"/sendMessage\",\r\n    {\r\n      ...postRequest,\r\n      body: JSON.stringify({\r\n        chat_id: username,\r\n        text: message,\r\n      }),\r\n    }\r\n  );\r\n  const jsonResponse = await response.json();\r\n  if (!jsonResponse.ok) {\r\n    console.error(\"Error while sending: \", jsonResponse);\r\n    process.exit(1);\r\n  }\r\n  return {\r\n    messageId: jsonResponse.result.message_id,\r\n  };\r\n};\r\n\r\nexport const awaitReply = async (\r\n  token: string,\r\n  userId: string,\r\n  messageId: number\r\n) => {\r\n  let offset = 0;\r\n  while (true) {\r\n    const response = await fetch(\r\n      \"https://api.telegram.org/bot\" + token + \"/getUpdates\",\r\n      {\r\n        ...postRequest,\r\n        body: JSON.stringify({\r\n          offset,\r\n          timeout: 25,\r\n          allowed_updates: [\"message\", \"message_reaction\", \"poll_answer\"],\r\n        }),\r\n      }\r\n    );\r\n    const jsonResponse = await response.json();\r\n\r\n    if (jsonResponse.ok) {\r\n      const found = jsonResponse.result.find(\r\n        (res: any) =>\r\n          (res.message &&\r\n            res.message.from.id == userId &&\r\n            res.message.chat.id == userId &&\r\n            res.message.reply_to_message &&\r\n            res.message.reply_to_message.message_id === messageId) ||\r\n          (res.message_reaction &&\r\n            res.message_reaction.chat.id == userId &&\r\n            res.message_reaction.user.id == userId &&\r\n            res.message_reaction.message_id == messageId)\r\n      );\r\n\r\n      if (found && found.message) {\r\n        return found.message.text;\r\n      } else if (found && found.message_reaction) {\r\n        if (\r\n          found.message_reaction.new_reaction.find((x: any) => x.emoji == \"\uD83D\uDC4D\")\r\n        ) {\r\n          return \"Y\";\r\n        } else if (\r\n          found.message_reaction.new_reaction.find((x: any) => x.emoji == \"\uD83D\uDC4E\")\r\n        ) {\r\n          return \"N\";\r\n        }\r\n      } else if (jsonResponse.length >= 100) {\r\n        offset = jsonResponse.result.slice(-1).update_id;\r\n      }\r\n    }\r\n    await new Promise((resolve) => setTimeout(resolve, 5000));\r\n  }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,wBAAkB;AAElB,IAAM,cAAc;AAAA,EAClB,QAAQ;AAAA,EACR,SAAS;AAAA,IACP,QAAQ;AAAA,IACR,gBAAgB;AAAA,EAClB;AACF;AACO,IAAM,cAAc,OACzB,OACA,UACA,YACG;AACH,QAAM,WAAW,UAAM,kBAAAA;AAAA,IACrB,iCAAiC,QAAQ;AAAA,IACzC;AAAA,MACE,GAAG;AAAA,MACH,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,MAAM;AAAA,MACR,CAAC;AAAA,IACH;AAAA,EACF;AACA,QAAM,eAAe,MAAM,SAAS,KAAK;AACzC,MAAI,CAAC,aAAa,IAAI;AACpB,YAAQ,MAAM,yBAAyB,YAAY;AACnD,YAAQ,KAAK,CAAC;AAAA,EAChB;AACA,SAAO;AAAA,IACL,WAAW,aAAa,OAAO;AAAA,EACjC;AACF;AAEO,IAAM,aAAa,OACxB,OACA,QACA,cACG;AACH,MAAI,SAAS;AACb,SAAO,MAAM;AACX,UAAM,WAAW,UAAM,kBAAAA;AAAA,MACrB,iCAAiC,QAAQ;AAAA,MACzC;AAAA,QACE,GAAG;AAAA,QACH,MAAM,KAAK,UAAU;AAAA,UACnB;AAAA,UACA,SAAS;AAAA,UACT,iBAAiB,CAAC,WAAW,oBAAoB,aAAa;AAAA,QAChE,CAAC;AAAA,MACH;AAAA,IACF;AACA,UAAM,eAAe,MAAM,SAAS,KAAK;AAEzC,QAAI,aAAa,IAAI;AACnB,YAAM,QAAQ,aAAa,OAAO;AAAA,QAChC,CAAC,QACE,IAAI,WACH,IAAI,QAAQ,KAAK,MAAM,UACvB,IAAI,QAAQ,KAAK,MAAM,UACvB,IAAI,QAAQ,oBACZ,IAAI,QAAQ,iBAAiB,eAAe,aAC7C,IAAI,oBACH,IAAI,iBAAiB,KAAK,MAAM,UAChC,IAAI,iBAAiB,KAAK,MAAM,UAChC,IAAI,iBAAiB,cAAc;AAAA,MACzC;AAEA,UAAI,SAAS,MAAM,SAAS;AAC1B,eAAO,MAAM,QAAQ;AAAA,MACvB,WAAW,SAAS,MAAM,kBAAkB;AAC1C,YACE,MAAM,iBAAiB,aAAa,KAAK,CAAC,MAAW,EAAE,SAAS,WAAI,GACpE;AACA,iBAAO;AAAA,QACT,WACE,MAAM,iBAAiB,aAAa,KAAK,CAAC,MAAW,EAAE,SAAS,WAAI,GACpE;AACA,iBAAO;AAAA,QACT;AAAA,MACF,WAAW,aAAa,UAAU,KAAK;AACrC,iBAAS,aAAa,OAAO,MAAM,EAAE,EAAE;AAAA,MACzC;AAAA,IACF;AACA,UAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AAAA,EAC1D;AACF;;;ADpFA,IAAqB,WAArB,MAA8B;AAAA,EAI5B,YAAY;AAAA,IACV;AAAA,IACA;AAAA,EACF,GAGG;AATH;AACA;AAAA,EAQI;AAAA,EACJ,MAAM,OAAO,SAAiB;AAC5B,UAAM,EAAE,UAAU,IAAI,MAAM;AAAA,MAC1B,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,IACF;AACA,UAAM,WAAW,MAAM;AAAA,MACrB,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;",
  "names": ["fetch"]
}
